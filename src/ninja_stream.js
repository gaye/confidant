/**
 * @fileoverview A stream that reads in confidant's configuration files
 *     and writes out ninja build rules.
 */
let Transform = require('stream').Transform;
let debug = require('debug')('confidant/ninja_stream');
let dirname = require('path').dirname;
let flatten = require('lodash/array/flatten');
let glob = require('glob').sync;
let inherits = require('util').inherits;
let readFileSync = require('fs').readFileSync;

function NinjaStream() {
  Transform.call(this, { objectMode: true });
  this.id = 0;

  this.push(`# This ninja build file was generated by confidant.
# Do not modify it directly. Instead, modify one or
# more configure.js files.
`);
}
inherits(NinjaStream, Transform);
module.exports = NinjaStream;

NinjaStream.prototype._transform = function(file, encoding, done) {
  debug(`Parsing ${file}`);
  let contents = readFileSync(file);
  let dir = dirname(file);
  let tasks = require(file);
  debug(`Parsing ${file}... found ${tasks.length} tasks`);
  tasks.forEach(task => {
    let rule = `rule-${this.id++}`;
    let js = task.rule.toString();  // Function.prototype.toString
    let cmd = `${contents}(${js})()`.replace(/(\n|\r)/g, '');
    let inputs = flatten(
      task.inputs.map(input => {
        if (input.includes('*') ||
            input.includes('?') ||
            input.includes('[') ||
            input.includes('!') ||
            input.includes('+') ||
            input.includes('@')) {
          return glob(input, { cwd: dir });
        }

        return input;
      }),
      true /* isDeep */
    )
    .map(input => `${dir}/${input}`);
    let outputs = Array.isArray(task.outputs) ?
      task.outputs.map(output => `${dir}/${output}`).join(' ') :
      `${dir}/${task.outputs}`;

    this.push(`
rule ${rule}
  command = cd ${dir} && node -e "${cmd}"

build ${outputs}: ${rule} ${inputs.join(' ')}
`);
  });

  done();
};
