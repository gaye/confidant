/**
 * @fileoverview A stream that reads in confidant's configuration files
 *               and writes out ninja build rules.
 */
let Transform = require('stream').Transform;
let chdir = require('./chdir');
let debug = require('debug')('confidant/ninja_stream');
let dirname = require('path').dirname;
let envToString = require('./escape').envToString;
let inherits = require('util').inherits;
let rule = require('./rule');
let streamToArray = require('./stream_to_array');

function NinjaStream() {
  Transform.call(this, { objectMode: true });
  this.id = 0;

  this.push(`# This ninja build file was generated by confidant.
# Do not modify it directly. Instead, modify one or
# more configure.js files.
`);
}
inherits(NinjaStream, Transform);

NinjaStream.prototype._transform = async function(file, encoding, done) {
  debug(`Parsing ${file}`);
  let dir = dirname(file);
  let build = await chdir(dir, () => require(`${dir}/configure.js`));

  if (Array.isArray(build)) {
    debug('Build config sync');
    return this._syncTransform(file, encoding, build, done);
  }

  if (typeof build === 'function') {
    debug('Build config async');
    return this._asyncTransform(file, encoding, build, done);
  }

  throw new Error(`Invalid build specified in ${file}`);
};

NinjaStream.prototype._syncTransform = function(file, encoding, tasks, done) {
  tasks.forEach((task, index) => {
    this._createRule(
      rule.getOutputs(file, task),
      rule.getInputs(file, task),
      dirname(file),
      `(function() { require('./configure')[${index}].rule(); })();`
    );
  });

  debug(`Wrote ${tasks.length} rules from ${file} to build.ninja`);
  done();
};

NinjaStream.prototype._asyncTransform = async function(file, encoding, RuleStream, done) {
  let tasks = await chdir(dirname(file), () => streamToArray(new RuleStream()));
  tasks.forEach((task, index) => {
    this._createRule(
      rule.getOutputs(file, task),
      rule.getInputs(file, task),
      dirname(file),
      `(function() { var Stream = require('./configure'); var tasks = []; var stream = new Stream(); stream.on('data', function(rule) { tasks.push(rule); }); stream.on('end', function() { tasks[${index}].rule(); }); })();`
    );
  });

  debug(`Wrote ${tasks.length} rules from ${file} to build.ninja`);
  done();
};

NinjaStream.prototype._createRule = function(outputs, inputs, dir, cmd) {
  let id = this.id++;
  this.push(`
rule rule-${id}
  command = cd ${dir} && ${envToString(process.env)} node -e "${cmd}"

build ${outputs.join(' ')}: rule-${id} ${inputs.join(' ')}
`);
};

module.exports = NinjaStream;
